class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        // this is the actual method of the this question  that before method is not optimized

        int n=nums1.size();
        int m=nums2.size();

        int ind1=-1;
        int ind2=-1;
        int req2=(n+m)/2;
        int req1=((n+m)/2)-1;

        int i=0;
        int j=0;
        int cnt=0;
        while(i<n && j<m){

            if(nums1[i]<nums2[j]){
                if(cnt==req1) ind1=nums1[i];
                if(cnt==req2) ind2=nums1[i];
                i++;
                cnt++;
            }
            else {
                 if(cnt==req1) ind1=nums2[j];
                if(cnt==req2) ind2=nums2[j];
                j++;
                cnt++;
            }
        }

        while(i<n){
             if(cnt==req1) ind1=nums1[i];
                if(cnt==req2) ind2=nums1[i];
                i++;
                cnt++;
        }
        while(j<m){
             if(cnt==req1) ind1=nums2[j];
                if(cnt==req2) ind2=nums2[j];
                j++;
                cnt++;
        }

        if((n+m)%2==1){
    return ind2;  // Corrected: should return ind2
}

        
        return (ind1+ind2)/2.0;
    }
};
